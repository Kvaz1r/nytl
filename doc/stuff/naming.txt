Vec2f vec {0.f, 0.f};
Mat34d mat {};

Transform2f transform {};
auto myCallback = nytl::Callback<void(const Vec2u8&)> {};
Connection connection = (myCallback += []{});

nytl::CompFunc<void()> a {};


#include <nytl/Vec.hpp>
#include <nytl/vec.hpp>
#include <nytl/vec>
#include <nytl/Vec>

auto my_callback = myCallback;

template<std::size_t D, typename T>
class Vec
{
	using Size = std::size_t;
	using Value = t;
	
	constexpr static std::size_t dim = D;
	constexpr static std::size_t Dim = D;
};


nytl::Vec2f;

nytl::Vec2ui size() const { return size_; }
void size(const nytl::Vec2f& psize){ size_ = psize; }
